{"version":3,"sources":["component/LinuxApp.js","component/AppNavbar.js","component/AppDrawer.js","component/AppFooter.js","App.js","serviceWorker.js","index.js"],"names":["LinuxApp","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","item","url","iconDesktopUrl","toString","startsWith","concat","iconMobileUrl","flatpakAppId","data","props","react_default","a","createElement","Card_default","className","CardActionArea_default","href","getUrl","target","Typography_default","color","gutterBottom","name","CardContent_default","src","getDesktopImage","Component","AppNavbar","AppBar_default","position","Toolbar_default","style","width","variant","categories","id","MenuItemList","listItems","map","index_es","button","primary","AppDrawer","Fragment","Drawer_default","AppFooter","_React$Component","React","App","AppNavbar_AppNavbar","AppDrawer_AppDrawer","LinuxApp_LinuxApp","AppFooter_AppFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c51d8bc4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport '../css/LinuxApp.scss';\r\n\r\nconst FLATHUB_BASE_URL = 'https://flathub.org'\r\n\r\nexport class LinuxApp extends Component {\r\n\r\n    getDesktopImage(item) {\r\n        let url = item.iconDesktopUrl.toString();\r\n\r\n        if (!url.startsWith(\"https\")) {\r\n            url = `${FLATHUB_BASE_URL}${item.iconDesktopUrl}`;\r\n        }\r\n\r\n        return url;\r\n    }\r\n\r\n    getMobileImage(item) {\r\n        return `${FLATHUB_BASE_URL}${item.iconMobileUrl}`\r\n    }\r\n\r\n    getUrl(item) {\r\n        return `${FLATHUB_BASE_URL}/apps/details/${item.flatpakAppId}`\r\n    }\r\n\r\n    render() {\r\n        const { data } = this.props\r\n        return (\r\n            <Card className=\"card\">\r\n                <CardActionArea>\r\n                    <a className=\"link\" href={this.getUrl(data)} target=\"_blank\">\r\n                        <Typography className=\"center title\" color=\"textSecondary\" gutterBottom>\r\n                            {data.name}\r\n                        </Typography>\r\n\r\n                        <CardContent>\r\n                            <img className=\"icon center\" src={this.getDesktopImage(data)} />\r\n                        </CardContent>\r\n                    </a>\r\n                </CardActionArea>\r\n            </Card>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport '../css/AppNavbar.scss';\r\n\r\nexport class AppNavbar extends Component {\r\n    render() {\r\n        return (\r\n            <AppBar className=\"navbar\" position=\"fixed\" color=\"primary\">\r\n                <Toolbar className=\"toolbar\">\r\n                  <img className=\"logo\" src={\"./images/app_store.png\"} style={{width: \"32px\"}} />\r\n                    <Typography className=\"brand\" variant=\"h6\" color=\"inherit\">\r\n                        App Store\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport { ListItem, List, ListItemText } from '@material-ui/core';\r\nimport '../css/AppDrawer.scss';\r\n\r\nconst categories = [\r\n    { id: 1, src: './images/appimage.png', name: 'AppImage' },\r\n    { id: 2, src: './images/flatpak.png', name: 'Flatpak' },\r\n    { id: 3, src: './images/snap.png', name: 'Snap' }\r\n]\r\n\r\nfunction MenuItemList() {\r\n    const listItems = categories.map((item) =>\r\n        <ListItem className=\"list-item\" button key={item.id.toString()}>\r\n            <img className=\"icon\" src={item.src} />\r\n            <ListItemText primary={item.name}></ListItemText>\r\n        </ListItem>\r\n    )\r\n    return (\r\n        <List>\r\n            {listItems}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport class AppDrawer extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Drawer\r\n                    variant=\"permanent\">\r\n                    <MenuItemList />\r\n                </Drawer>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport '../css/AppFooter.scss';\r\n\r\nexport class AppFooter extends React.Component {\r\n    render() {\r\n        return (\r\n            <footer><small>&copy; Copyright 2019, StellaSoft</small></footer>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport './App.scss'\r\nimport { LinuxApp } from './component/LinuxApp.js'\r\nimport { AppNavbar } from './component/AppNavbar.js'\r\nimport { AppDrawer } from './component/AppDrawer.js'\r\nimport data from './data/flatpaks.json'\r\nimport { AppFooter } from './component/AppFooter';\r\nimport { CssBaseline } from '@material-ui/core';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <CssBaseline />\r\n          <AppNavbar />\r\n          <AppDrawer />\r\n          <div className=\"app-grid\">\r\n            {data.map((item) => {\r\n              return <LinuxApp data={item} />          \r\n            })}\r\n          </div>\r\n          <AppFooter />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}